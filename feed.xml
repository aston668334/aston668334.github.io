<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en"><generator uri="https://jekyllrb.com/" version="4.3.3">Jekyll</generator><link href="https://aston668334.github.io/feed.xml" rel="self" type="application/atom+xml"/><link href="https://aston668334.github.io/" rel="alternate" type="text/html" hreflang="en"/><updated>2024-06-25T14:50:43+00:00</updated><id>https://aston668334.github.io/feed.xml</id><title type="html">blank</title><subtitle>Guan-Wei Li is a dedicated and logically-minded developer with a strong adherence to the DRY (Don&apos;t Repeat Yourself) principle. His expertise spans multiple fields, including web development, blockchain technology, and bioinformatics. He is passionate about learning new knowledge and tackling interdisciplinary challenges, with significant experience in software development, data analysis, and system optimization. </subtitle><entry><title type="html">GWAS 常用套件</title><link href="https://aston668334.github.io/blog/2024/GWAS/" rel="alternate" type="text/html" title="GWAS 常用套件"/><published>2024-06-24T17:00:00+00:00</published><updated>2024-06-24T17:00:00+00:00</updated><id>https://aston668334.github.io/blog/2024/GWAS</id><content type="html" xml:base="https://aston668334.github.io/blog/2024/GWAS/"><![CDATA[<p>曼哈頓圖是一種常用於GWAS結果可視化的方法，常用的曼哈頓圖套件包括：</p> <ol> <li> <p><a href="https://github.com/stephenturner/qqman">qqman</a>: 這是一個在R語言中開發的套件，提供了曼哈頓圖、Q-Q圖和熱圖等圖表，同時支持基因注釋和功能注釋等功能。</p> </li> <li> <p><a href="https://github.com/ShujiaHuang/qmplot">qmplot</a>: 這是一個在Python語言中開發的套件，提供了曼哈頓圖、Q-Q圖，同時支持基因注釋和功能注釋等功能。</p> </li> <li> <p><a href="https://www.cog-genomics.org/plink/2.0/">PLINK</a>: 這是一個開源軟件支持線性迴歸分析、對照比分析和生存分析等。</p> </li> <li> <p><a href="https://www.broadinstitute.org/haploview/haploview">Haploview</a>: 這是一個用於基因型分析的軟件，同時也支持曼哈頓圖和LD圖等圖表，用於GWAS分析和遺傳分析。</p> </li> <li> <p><a href="https://my.locuszoom.org/">LocusZoom</a>: 這是一個在線曼哈頓圖套件，可以用於對GWAS結果進行快速瀏覽和注釋，同時還支持基因注釋和LD計算等功能。</p> </li> </ol> <p>這些曼哈頓圖套件通常都提供了豐富的可定制化選項，例如顏色、標籤、字體等，可以讓用戶更好地呈現GWAS結果。需要注意的是，曼哈頓圖僅能用於快速展示GWAS結果，而不能進行詳細的統計分析和功能注釋。因此，在進行曼哈頓圖可視化時，還需進一步進行功能和統計分析。</p> <div class="row justify-content-sm-center"> <div class="col-sm-8 mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/blog/gwas-genome-wide-association-study_683773-52.avif-480.webp 480w,/assets/img/blog/gwas-genome-wide-association-study_683773-52.avif-800.webp 800w,/assets/img/blog/gwas-genome-wide-association-study_683773-52.avif-1400.webp 1400w," sizes="95vw" type="image/webp"/> <img src="/assets/img/blog/gwas-genome-wide-association-study_683773-52.avif" class="img-fluid rounded z-depth-1" width="100%" height="auto" title="Manhattan_plot" loading="lazy" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div>]]></content><author><name></name></author><category term="posts"/><category term="Bioinformatic"/><category term="GWAS"/><category term="tools"/><summary type="html"><![CDATA[介紹各種GWAS常用套件]]></summary></entry><entry><title type="html">Proxmox-VE NVIDIA GPU Passthrough</title><link href="https://aston668334.github.io/blog/2024/PVE_GPU/" rel="alternate" type="text/html" title="Proxmox-VE NVIDIA GPU Passthrough"/><published>2024-06-24T17:00:00+00:00</published><updated>2024-06-24T17:00:00+00:00</updated><id>https://aston668334.github.io/blog/2024/PVE_GPU</id><content type="html" xml:base="https://aston668334.github.io/blog/2024/PVE_GPU/"><![CDATA[<p>Proxmox VE (Virtual Environment) allows for GPU passthrough, enabling a virtual machine (VM) to use the full power of a physical GPU. This is useful for high-performance graphics, gaming, rendering, or machine learning.</p> <h2 id="prerequisites">Prerequisites</h2> <ol> <li><strong>Proxmox VE installed</strong>: Ensure Proxmox VE is installed and running on your system.</li> <li><strong>Supported hardware</strong>: Your CPU and motherboard must support IOMMU (Intel VT-d or AMD-Vi).</li> <li><strong>NVIDIA GPU</strong>: A GPU supported by your VM’s operating system.</li> </ol> <h2 id="step-by-step-guide">Step-by-Step Guide</h2> <h3 id="1-enable-iommu-in-bios">1. Enable IOMMU in BIOS</h3> <ul> <li>Reboot your machine and enter the BIOS/UEFI settings.</li> <li>Look for settings related to virtualization, such as “Intel VT-d” or “AMD IOMMU”, and enable them.</li> <li>Save and exit the BIOS/UEFI.</li> </ul> <h3 id="2-enable-iommu-in-proxmox">2. Enable IOMMU in Proxmox</h3> <ul> <li>Edit the GRUB configuration file:</li> </ul> <div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  nano /etc/default/grub
</code></pre></div></div> <ul> <li>Add the following parameters to GRUB_CMDLINE_LINUX_DEFAULT: <ul> <li>For Intel CPUs: <div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">intel_iommu</span><span class="o">=</span>on
</code></pre></div> </div> </li> <li>For AMD CPUs: <div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">amd_iommu</span><span class="o">=</span>on
</code></pre></div> </div> </li> </ul> </li> <li>Update the GRUB configuration:</li> </ul> <div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>update-grub
</code></pre></div></div> <ul> <li>Reboot the Proxmox server:</li> </ul> <div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>reboot
</code></pre></div></div> <h3 id="3-verify-iommu-groups">3. Verify IOMMU Groups</h3> <ul> <li>After rebooting, verify IOMMU groups:</li> </ul> <div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>find /sys/kernel/iommu_groups/ <span class="nt">-type</span> l
</code></pre></div></div> <ul> <li>This command will list the devices and their respective IOMMU groups.</li> </ul> <h3 id="4-blacklist-the-nvidia-driver">4. Blacklist the NVIDIA Driver</h3> <ul> <li>Edit the modprobe blacklist configuration:</li> </ul> <div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>nano /etc/modprobe.d/blacklist.conf
</code></pre></div></div> <ul> <li>Add the following lines:</li> </ul> <div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>blacklist nouveau
blacklist nvidia
blacklist nvidiafb
</code></pre></div></div> <ul> <li>Update the initial RAM filesystem:</li> </ul> <div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>update-initramfs <span class="nt">-u</span>
</code></pre></div></div> <ul> <li>Reboot the Proxmox server again:</li> </ul> <div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>reboot
</code></pre></div></div> <h3 id="5-install-necessary-packages">5. Install Necessary Packages</h3> <ul> <li>Install the vfio modules:</li> </ul> <div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>apt-get update
apt-get <span class="nb">install </span>pve-headers
apt-get <span class="nb">install</span> <span class="nt">-y</span> vfio vfio-pci
</code></pre></div></div> <h3 id="6-configure-gpu-passthrough">6. Configure GPU Passthrough</h3> <ul> <li>Identify the GPU and its associated audio device using lspci:</li> </ul> <div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>lspci <span class="nt">-nn</span>
</code></pre></div></div> <ul> <li>Note the PCI IDs of the GPU and the audio device. They look something like ‘01:00.0’ and ‘01:00.1’.</li> <li>Edit the VFIO configuration to bind these devices:</li> </ul> <div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>nano /etc/modprobe.d/vfio.conf
</code></pre></div></div> <ul> <li>Add the following lines, replacing the PCI IDs with your own:</li> </ul> <div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>options vfio-pci <span class="nv">ids</span><span class="o">=</span>10de:1c82,10de:0fb9
</code></pre></div></div> <h3 id="7-edit-proxmox-configuration-files">7. Edit Proxmox Configuration Files</h3> <ul> <li>Add the following to /etc/modules:</li> </ul> <div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>vfio
vfio_iommu_type1
vfio_pci
vfio_virqfd
</code></pre></div></div> <ul> <li>Edit the Proxmox VM configuration file:</li> </ul> <div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>nano /etc/pve/qemu-server/&lt;vmid&gt;.conf
</code></pre></div></div> <ul> <li>Add the following lines:</li> </ul> <div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>hostpci0: 01:00.0,pcie<span class="o">=</span>1,x-vga<span class="o">=</span>1
</code></pre></div></div> <h3 id="8-install-nvidia-drivers-on-the-vm">8. Install NVIDIA Drivers on the VM</h3> <ul> <li>Start the VM and install the NVIDIA drivers within the guest operating system.</li> </ul> <h4 id="troubleshooting-tips">Troubleshooting Tips</h4> <ul> <li>Check dmesg logs: Useful for debugging IOMMU issues.</li> </ul> <div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>dmesg | <span class="nb">grep</span> <span class="nt">-e</span> DMAR <span class="nt">-e</span> IOMMU
</code></pre></div></div> <ul> <li>Ensure no other VM or the host is using the GPU.</li> <li>Verify IOMMU groups: Some devices might need to be isolated into separate groups.</li> </ul> <h2 id="conclusion">Conclusion</h2> <p>With these steps, your Proxmox VE setup should be capable of passing through an NVIDIA GPU to a VM, allowing it to utilize the GPU directly. This setup is beneficial for high-performance workloads requiring direct access to GPU resources.</p>]]></content><author><name></name></author><category term="posts"/><category term="Proxmox-VE"/><category term="GPU"/><summary type="html"><![CDATA[Proxmox VE (Virtual Environment) allows for GPU passthrough, enabling a virtual machine (VM) to use the full power of a physical GPU. This is useful for high-performance graphics, gaming, rendering, or machine learning.]]></summary></entry><entry><title type="html">eQTL TWAS MetaXcan</title><link href="https://aston668334.github.io/blog/2024/eQTL-TWAS-MetaXcan/" rel="alternate" type="text/html" title="eQTL TWAS MetaXcan"/><published>2024-06-24T17:00:00+00:00</published><updated>2024-06-24T17:00:00+00:00</updated><id>https://aston668334.github.io/blog/2024/eQTL%20TWAS%20MetaXcan</id><content type="html" xml:base="https://aston668334.github.io/blog/2024/eQTL-TWAS-MetaXcan/"><![CDATA[<p>轉錄體全基因結合研究（TWAS）是一種結合基因資料和基因表達信息的方法，用於研究基因表達與複雜性狀或疾病之間的關係。通過分析特定組織的基因表達，TWAS可以更有針對性和特定性地調查基因-狀態關聯。相比傳統的GWAS，TWAS擁有更低的多重檢驗負擔，可以幫助鑒定複雜表型的潛在致病基因。因此，TWAS已經成為遺傳流行病學中的一種熱門工具，用於發現與疾病相關的新基因關聯。</p> <div class="row justify-content-sm-center"> <div class="col-sm-8 mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/blog/Principles-of-eQTL-mapping-for-investigating-immune-response-variation-A-General-480.webp 480w,/assets/img/blog/Principles-of-eQTL-mapping-for-investigating-immune-response-variation-A-General-800.webp 800w,/assets/img/blog/Principles-of-eQTL-mapping-for-investigating-immune-response-variation-A-General-1400.webp 1400w," sizes="95vw" type="image/webp"/> <img src="/assets/img/blog/Principles-of-eQTL-mapping-for-investigating-immune-response-variation-A-General.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" title="Principles-of-eQTL-mapping-for-investigating-immune-response-variation-A-General" loading="lazy" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <p>MetaXcan是一種統計方法，用於整合轉錄組和基因組學數據，以預測表型的基因表達量。它使用基因表達量的調節模式，即外源SNP對目標基因的影響，來計算每個基因的表達量。 MetaXcan的主要優勢在於，它可以在相對較小的樣本數據集中進行基因表達量預測，並且可以利用大型轉錄組和基因組學數據庫來獲得更高的預測能力。它還可以用於識別表型的潛在遺傳基礎和疾病發生機制的新穎生物學標誌物，例如高血壓。</p> <div class="row justify-content-sm-center"> <div class="col-sm-8 mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/blog/F2.large-480.webp 480w,/assets/img/blog/F2.large-800.webp 800w,/assets/img/blog/F2.large-1400.webp 1400w," sizes="95vw" type="image/webp"/> <img src="/assets/img/blog/F2.large.jpg" class="img-fluid rounded z-depth-1" width="100%" height="auto" title="F2.large" loading="lazy" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div>]]></content><author><name></name></author><category term="posts"/><category term="Bioinformatic"/><category term="MetaXcan"/><category term="eQTL"/><category term="TWAS"/><summary type="html"><![CDATA[eQTL TWAS MetaXcan 簡介]]></summary></entry><entry><title type="html">Manhattan 做圖</title><link href="https://aston668334.github.io/blog/2024/manhattan/" rel="alternate" type="text/html" title="Manhattan 做圖"/><published>2024-06-24T17:00:00+00:00</published><updated>2024-06-24T17:00:00+00:00</updated><id>https://aston668334.github.io/blog/2024/manhattan</id><content type="html" xml:base="https://aston668334.github.io/blog/2024/manhattan/"><![CDATA[<p>曼哈頓圖是一種常用於GWAS結果可視化的方法，常用的曼哈頓圖套件包括：</p> <ol> <li> <p>qqman: 這是一個在R語言中開發的套件，提供了曼哈頓圖、Q-Q圖和熱圖等圖表，同時支持基因注釋和功能注釋等功能。</p> </li> <li> <p>PLINK: 這是一個開源軟件，提供了曼哈頓圖、Q-Q圖和LD圖等圖表，同時還支持線性迴歸分析、對照比分析和生存分析等。</p> </li> <li> <p>Haploview: 這是一個用於基因型分析的軟件，同時也支持曼哈頓圖和LD圖等圖表，用於GWAS分析和遺傳分析。</p> </li> <li> <p>LocusZoom: 這是一個在線曼哈頓圖套件，可以用於對GWAS結果進行快速瀏覽和注釋，同時還支持基因注釋和LD計算等功能。</p> </li> </ol> <p>這些曼哈頓圖套件通常都提供了豐富的可定制化選項，例如顏色、標籤、字體等，可以讓用戶更好地呈現GWAS結果。需要注意的是，曼哈頓圖僅能用於快速展示GWAS結果，而不能進行詳細的統計分析和功能注釋。因此，在進行曼哈頓圖可視化時，還需進一步進行功能和統計分析。</p> <div class="row justify-content-sm-center"> <div class="col-sm-8 mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/blog/gwas-genome-wide-association-study_683773-52.avif-480.webp 480w,/assets/img/blog/gwas-genome-wide-association-study_683773-52.avif-800.webp 800w,/assets/img/blog/gwas-genome-wide-association-study_683773-52.avif-1400.webp 1400w," sizes="95vw" type="image/webp"/> <img src="/assets/img/blog/gwas-genome-wide-association-study_683773-52.avif" class="img-fluid rounded z-depth-1" width="100%" height="auto" title="Manhattan_plot" loading="lazy" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div>]]></content><author><name></name></author><category term="posts"/><category term="Bioinformatic"/><category term="GWAS"/><category term="Manhattan-plot"/><summary type="html"><![CDATA[簡單製作Manhattan圖]]></summary></entry><entry><title type="html">MetaXcan 實作教學</title><link href="https://aston668334.github.io/blog/2024/metaxcan/" rel="alternate" type="text/html" title="MetaXcan 實作教學"/><published>2024-06-24T17:00:00+00:00</published><updated>2024-06-24T17:00:00+00:00</updated><id>https://aston668334.github.io/blog/2024/metaxcan</id><content type="html" xml:base="https://aston668334.github.io/blog/2024/metaxcan/"><![CDATA[<h2 id="使用流程">使用流程</h2> <ol> <li> <p>Harmonization：將 PLINK 輸出的 GWAS 結果轉換為 MetaXcan 所需的格式。</p> </li> <li> <p>Imputation：對 GWAS 數據進行插補（如果必要），填補缺失的基因型數據。</p> </li> <li> <p>Merge：整合插補後的數據，生成一個完整的 GWAS 結果文件。</p> </li> <li> <p>SPrediXcan：使用預訓練的基因表達模型，結合 GWAS 數據，計算每個基因的 eQTL 值，並識別出顯著相關的基因。</p> </li> <li> <p>SMulTiXcan：對多個組織的 eQTL 結果進行整合分析，找出跨組織顯著相關的基因。</p> </li> </ol> <h3 id="harmonization">Harmonization</h3> <p>將plink輸出的GWAS結果整理成MetaXcan後面分析需要的格式。</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>python ./gwas_parsing.py <span class="se">\</span>
 <span class="nt">-gwas_file</span> /plink_output.phenotype.glm.logistic.hybrid <span class="se">\ </span><span class="c">#plink 輸出</span>
 <span class="nt">-liftover</span> <span class="nv">$liftover_hg19_hg38</span> <span class="se">\ </span><span class="c">#liftover 的chain file (是需求而定)</span>
 <span class="nt">-snp_reference_metadata</span> ./variant_metadata.txt.gz METADATA <span class="se">\ </span><span class="c"># refrence panel 可從MetaXcan github下載</span>
 <span class="nt">-output_column_map</span> ID variant_id <span class="se">\ </span><span class="c">#定義 plink 輸出的columns 名字</span>
 <span class="nt">-output_column_map</span> REF non_effect_allele <span class="se">\ </span><span class="c">#定義 plink 輸出的columns 名字</span>
 <span class="nt">-output_column_map</span> ALT1 effect_allele <span class="se">\ </span><span class="c">#定義 plink 輸出的columns 名字</span>
 <span class="nt">-output_column_map</span> OR effect_size <span class="se">\ </span><span class="c">#定義 plink 輸出的columns 名字</span>
 <span class="nt">-output_column_map</span> P pvalue <span class="se">\ </span><span class="c">#定義 plink 輸出的columns 名字</span>
 <span class="nt">-output_column_map</span> CHROM chromosome <span class="se">\ </span><span class="c">#定義 plink 輸出的columns 名字</span>
 <span class="nt">--chromosome_format</span> <span class="se">\</span>
 <span class="nt">-output_column_map</span> POS position <span class="se">\ </span><span class="c">#定義 plink 輸出的columns 名字</span>
 <span class="nt">-output_column_map</span> A1_FREQ frequency <span class="se">\ </span><span class="c">#定義 plink 輸出的columns 名字</span>
 <span class="nt">--insert_value</span> sample_size 15492 <span class="nt">--insert_value</span> n_cases 1137 <span class="se">\ </span><span class="c">#sample size</span>
 <span class="nt">-output_order</span> variant_id panel_variant_id chromosome position effect_allele non_effect_allele frequency pvalue zscore effect_size standard_error sample_size n_cases <span class="se">\ </span><span class="c"># output 的順序</span>
 <span class="nt">-output</span> ./output_gwas.txt.gz <span class="c"># output 檔案名稱</span>
</code></pre></div></div> <h3 id="imputation">Imputation</h3> <p>如果做GWAS的時候沒有imputation則可以在此步驟imputation，但是這步驟有缺點 (作者使用MetaXcan做imputation之後的結果effect size都變成NA，原因不明知道的歡迎留言)。</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">for </span>i <span class="k">in </span>range<span class="o">(</span>1,22<span class="o">)</span>:
    <span class="k">for </span>j <span class="k">in </span>range<span class="o">(</span>10<span class="o">)</span>
python ./gwas_summary_imputation.py <span class="se">\</span>
 <span class="nt">-by_region_file</span> ./eur_ld.bed.gz <span class="se">\ </span><span class="c"># region file 可從MetaXcan github下載</span>
 <span class="nt">-gwas_file</span> ./output_gwas.txt.gz <span class="se">\ </span><span class="c">#上一步驟輸出</span>
 <span class="nt">-parquet_genotype</span> ./chr<span class="nv">$i</span>.variants.parquet <span class="se">\ </span><span class="c"># refrence panel 可從MetaXcan github下載</span>
 <span class="nt">-parquet_genotype_metadata</span> ./variant_metadata.parquet <span class="se">\ </span><span class="c"># refrence panel 可從MetaXcan github下載</span>
 <span class="nt">-window</span> 100000 <span class="se">\</span>
 <span class="nt">-parsimony</span> 7 <span class="se">\</span>
 <span class="nt">-chromosome</span> <span class="nv">$i</span> <span class="se">\</span>
 <span class="nt">-regularization</span> 0.1 <span class="se">\</span>
 <span class="nt">-frequency_filter</span> 0.01 <span class="se">\</span>
 <span class="nt">-sub_batches</span> 10 <span class="se">\</span>
 <span class="nt">-sub_batch</span> <span class="nv">$j</span> <span class="se">\</span>
 <span class="nt">-standardise_dosages</span> <span class="se">\</span>
 <span class="nt">-output</span> ./summary_imputation/output_gwas_chr<span class="o">{</span>1<span class="o">}</span>_sb<span class="o">{</span>2<span class="o">}</span>_reg0.1_ff0.01_by_region.txt.gz
</code></pre></div></div> <h3 id="merge">Merge</h3> <p>將上步驟的imputation結果整合成為一個檔案。</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>python ./gwas_summary_imputation_postprocess.py <span class="se">\</span>
 <span class="nt">-gwas_file</span> ./output_gwas.txt.gz <span class="se">\</span>
 <span class="nt">-folder</span> ./summary_imputation <span class="se">\</span>
 <span class="nt">-pattern</span> output_gwas.<span class="k">*</span> <span class="se">\</span>
 <span class="nt">-parsimony</span> 7 <span class="se">\</span>
 <span class="nt">-output</span> ./processed_summary_imputation/imputed_output_gwas.txt.gz
</code></pre></div></div> <h3 id="spredixcan">SPrediXcan</h3> <p>做重要的步驟，利用Database計算eQTL。利用bonferroni correction找出顯著的基因，或是利用P 和 effect size 做出火山圖。</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>parallel <span class="nt">--jobs</span> 56 <span class="se">\</span>
    python ./SPrediXcan.py <span class="se">\</span>
    <span class="nt">--gwas_file</span> ./processed_summary_imputation/imputed_output_gwas.txt.gz <span class="se">\</span>
    <span class="nt">--snp_column</span> panel_variant_id <span class="nt">--effect_allele_column</span> effect_allele <span class="nt">--non_effect_allele_column</span> non_effect_allele <span class="nt">--zscore_column</span> zscore <span class="se">\</span>
    <span class="nt">--model_db_path</span> ./models/eqtl/mashr/mashr_<span class="o">{</span>1<span class="o">}</span>.db <span class="se">\</span>
    <span class="nt">--covariance</span> ./models/eqtl/mashr/mashr_<span class="o">{</span>1<span class="o">}</span>.txt.gz <span class="se">\</span>
    <span class="nt">--keep_non_rsid</span> <span class="nt">--additional_output</span> <span class="nt">--model_db_snp_key</span> varID <span class="se">\</span>
    <span class="nt">--throw</span> <span class="se">\</span>
    <span class="nt">--output_file</span> ./spredixcan/eqtl/imputed_output_gwas__PM__<span class="o">{</span>1<span class="o">}</span>.csv <span class="se">\</span>
    ::: <span class="si">$(</span><span class="nb">cat</span> <span class="k">${</span><span class="nv">target</span><span class="k">}</span><span class="si">)</span>
</code></pre></div></div> <h3 id="smultixcan">SMulTiXcan</h3> <p>將上一步驟產生的多組織eQTL統整起來並利用bonferroni correction找出顯著的基因。</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>python ./SMulTiXcan.py <span class="se">\</span>
<span class="nt">--models_folder</span> ./models/eqtl/mashr <span class="se">\</span>
<span class="nt">--models_name_pattern</span> <span class="s2">"mashr_(.*).db"</span> <span class="se">\</span>
<span class="nt">--snp_covariance</span> ./models/gtex_v8_expression_mashr_snp_smultixcan_covariance.txt.gz <span class="se">\</span>
<span class="nt">--metaxcan_folder</span> ./spredixcan_heart/eqtl/ <span class="se">\</span>
<span class="nt">--metaxcan_filter</span> <span class="s2">"imputed_CAD_TWB_gwas__PM__(.*).csv"</span> <span class="se">\</span>
<span class="nt">--metaxcan_file_name_parse_pattern</span> <span class="s2">"(.*)__PM__(.*).csv"</span> <span class="se">\</span>
<span class="nt">--gwas_file</span> ./processed_summary_imputation/imputed_output_gwas.txt.gz <span class="se">\</span>
<span class="nt">--snp_column</span> panel_variant_id <span class="nt">--effect_allele_column</span> effect_allele <span class="nt">--non_effect_allele_column</span> non_effect_allele <span class="nt">--zscore_column</span> zscore <span class="nt">--keep_non_rsid</span> <span class="nt">--model_db_snp_key</span> varID <span class="se">\</span>
<span class="nt">--cutoff_condition_number</span> 30 <span class="se">\</span>
<span class="nt">--verbosity</span> 7 <span class="se">\</span>
<span class="nt">--throw</span> <span class="se">\</span>
<span class="nt">--output</span> ./smultixcan/eqtl/imputed_output_gwas_smultixcan.txt
</code></pre></div></div> <p>Ref: <a href="https://github.com/hakyimlab/MetaXcan">https://github.com/hakyimlab/MetaXcan</a></p>]]></content><author><name></name></author><category term="posts"/><category term="Bioinformatic"/><category term="MetaXcan"/><summary type="html"><![CDATA[MetaXcan 實作教學]]></summary></entry><entry><title type="html">MetaXcan 介紹</title><link href="https://aston668334.github.io/blog/2024/metaxcan_intro/" rel="alternate" type="text/html" title="MetaXcan 介紹"/><published>2024-06-24T17:00:00+00:00</published><updated>2024-06-24T17:00:00+00:00</updated><id>https://aston668334.github.io/blog/2024/metaxcan_intro</id><content type="html" xml:base="https://aston668334.github.io/blog/2024/metaxcan_intro/"><![CDATA[<p>MetaXcan 是一個計算工具，用於將基因型數據轉換為基因表達數據，進行基因表達定量性狀位點（eQTL）分析，並將這些結果與表型數據結合，以識別與特定疾病或表型相關的基因。這個工具的開發旨在改善基因組寬關聯研究（GWAS）的解釋能力，通過整合 GWAS 和基因表達數據，能夠更準確地識別疾病相關基因。</p> <h2 id="核心功能">核心功能：</h2> <ol> <li> <p>基因型到表達型轉換：MetaXcan 使用預先訓練的基因表達模型，這些模型基於大型公共數據庫（如 GTEx）構建，將個體的基因型數據轉換為基因表達數據。</p> </li> <li> <p>整合分析：結合基因表達數據和 GWAS 數據，進行統計分析，找出與疾病或表型顯著相關的基因。</p> </li> <li> <p>多組織分析：支援多組織的基因表達分析，通過整合多個組織的數據，提供更全面的疾病相關基因鑑定。</p> </li> </ol> <h2 id="使用流程">使用流程</h2> <ol> <li> <p>Harmonization：將 PLINK 輸出的 GWAS 結果轉換為 MetaXcan 所需的格式。</p> </li> <li> <p>Imputation：對 GWAS 數據進行插補（如果必要），填補缺失的基因型數據。</p> </li> <li> <p>Merge：整合插補後的數據，生成一個完整的 GWAS 結果文件。</p> </li> <li> <p>SPrediXcan：使用預訓練的基因表達模型，結合 GWAS 數據，計算每個基因的 eQTL 值，並識別出顯著相關的基因。</p> </li> <li> <p>SMulTiXcan：對多個組織的 eQTL 結果進行整合分析，找出跨組織顯著相關的基因。</p> </li> </ol> <h2 id="優點">優點</h2> <ol> <li>精確性：通過結合基因型和基因表達數據，MetaXcan 提高了疾病相關基因鑑定的精確性。</li> <li>靈活性：支援多種分析模式和數據來源，可用於多組織、多表型的分析。</li> <li>開放性：MetaXcan 是開源的，研究人員可以根據需要對其進行修改和擴展。</li> </ol> <h2 id="應用場景">應用場景</h2> <ol> <li>疾病研究：識別與特定疾病相關的基因，有助於揭示疾病的遺傳機制。</li> <li>個性化醫療：通過了解個體基因表達的差異，提供個性化的治療方案。</li> <li>基因功能研究：幫助研究基因在不同組織中的功能及其與表型的關聯。</li> </ol>]]></content><author><name></name></author><category term="posts"/><category term="Bioinformatic"/><category term="tools"/><summary type="html"><![CDATA[MetaXcan 介紹]]></summary></entry></feed>